_model: api-annotated
---
title: API / keechma.controller documentation
---
body:

<div class="api-container">
    
    <div class="sidebar primary">
        <h3 class="no-link"><span class="inner">Project</span></h3>
        <ul class="index-link">
            <li class="depth-1 ">
                <a href="/api/keechma/">
                    <div class="inner">Index</div>
                </a>
            </li>
        </ul>
        <h3 class="no-link"><span class="inner">Namespaces</span></h3>
        <ul>
            <li class="depth-1">
                <div class="no-link">
                    <div class="inner"><span class="tree"><span class="top"></span><span class="bottom"></span></span><span>keechma</span></div>
                </div>
            </li>
            <li class="depth-2 branch">
                <a href="/api/keechma/keechma_app-state">
                    <div class="inner"><span class="tree"><span class="top"></span><span class="bottom"></span></span><span>app-state</span></div>
                </a>
            </li>
            <li class="depth-2 branch current">
                <a href="/api/keechma/keechma_controller">
                    <div class="inner"><span class="tree"><span class="top"></span><span class="bottom"></span></span><span>controller</span></div>
                </a>
            </li>
            <li class="depth-2 branch">
                <a href="/api/keechma/keechma_controller-manager">
                    <div class="inner"><span class="tree"><span class="top"></span><span class="bottom"></span></span><span>controller-manager</span></div>
                </a>
            </li>
            <li class="depth-2">
                <a href="/api/keechma/keechma_ui-component">
                    <div class="inner"><span class="tree"><span class="top"></span><span class="bottom"></span></span><span>ui-component</span></div>
                </a>
            </li>
        </ul>
    </div>
    <div class="sidebar secondary">
        <h3><a href="#top"><span class="inner">Public Vars</span></a></h3>
        <ul>
            <li class="depth-1">
                <a href="#var--.3ESerializedController">
                    <div class="inner"><span>-&gt;SerializedController</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-context">
                    <div class="inner"><span>context</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-dispatcher">
                    <div class="inner"><span>dispatcher</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-execute">
                    <div class="inner"><span>execute</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-handler">
                    <div class="inner"><span>handler</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-is-running.3F">
                    <div class="inner"><span>is-running?</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-map-.3ESerializedController">
                    <div class="inner"><span>map-&gt;SerializedController</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-not-implemented">
                    <div class="inner"><span>not-implemented</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-params">
                    <div class="inner"><span>params</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-record-type">
                    <div class="inner"><span>record-type</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-redirect">
                    <div class="inner"><span>redirect</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-report">
                    <div class="inner"><span>report</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-send-command">
                    <div class="inner"><span>send-command</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-SerializedController">
                    <div class="inner"><span>SerializedController</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-ssr-handler">
                    <div class="inner"><span>ssr-handler</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-start">
                    <div class="inner"><span>start</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-stop">
                    <div class="inner"><span>stop</span></div>
                </a>
            </li>
            <li class="depth-1">
                <a href="#var-wake">
                    <div class="inner"><span>wake</span></div>
                </a>
            </li>
        </ul>
    </div>
    <div class="namespace-docs" id="content">
        <h1 class="anchor" id="top">keechma.controller</h1>
        <div class="doc">
            <div class="markdown">
                <p>Controllers in Keechma are the place where you put the code that has side-effects. They are managed by the <a href="keechma.controller-manager.html">keechma.controller-manager</a> which will start them or stop them based on the current
                    route.</p>
                <p>Each controller implements the <code>params</code> function. <code>params</code> function returns a subset of the route params that are the controller is interested in.</p>
                <p>For instance let&#x2019;s say that you have a <code>UserController</code> which should be running only when the user is on the route <code>/users</code>:</p>
                <pre><code class="clojure hljs"><span class="hljs-comment">;; let&apos;s say that your routes are defined like this:</span>

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> routes [<span class="hljs-string">&quot;:page&quot;</span>]) <span class="hljs-comment">;; Routes are managed by the app-state library.</span>

<span class="hljs-comment">;; When user goes to the url `/users` the params function would receive</span>
<span class="hljs-comment">;; something that looks like this:</span>

{<span class="hljs-symbol">:data</span> {<span class="hljs-symbol">:page</span> <span class="hljs-string">&quot;users&quot;</span>}}

<span class="hljs-comment">;; `params` function returns `true` only when user is on the `:page` &quot;users&quot;</span>
(<span class="hljs-name"><span class="hljs-builtin-name">defrecord</span></span> UserController [])

(<span class="hljs-name"><span class="hljs-builtin-name">defmethod</span></span> controller/params UserController [_ route-params]
  (<span class="hljs-name"><span class="hljs-builtin-name">when</span></span> (<span class="hljs-name"><span class="hljs-builtin-name">=</span></span> <span class="hljs-string">&quot;users&quot;</span> (<span class="hljs-name"><span class="hljs-builtin-name">get-in</span></span> route-params [<span class="hljs-symbol">:data</span> <span class="hljs-symbol">:page</span>]))
   <span class="hljs-literal">true</span>))
</code></pre>
                <p>When <code>params</code> function returns a non <code>nil</code> value the controller will be started:</p>
                <ol>
                    <li>Controller&#x2019;s <code>start</code> function will be synchronously called with the current application state. This function returns a new version of the state if needed. (if the <code>start</code> function is not doing any changes to the
                        app-state it must return the received version)</li>
                    <li>Controller&#x2019;s <code>handler</code> function will be called - this function will receive application state atom, channel through which the controller receives the commands (<code>in-chan</code>) and the channel through which the controller
                        can send commends to other controllers (<code>out-chan</code>).</li>
                </ol>
                <p>When <code>params</code> function returns a <code>nil</code> value that instance of the controller will be stopped:</p>
                <ol>
                    <li>Controller&#x2019;s <code>stop</code> function will be synchronously called with the current application state. This function returns a new version of the state if needed - use this function to clean up any data loaded by the controller (if
                        the <code>stop</code> function is not doing any changes to the app-state it must return the received version).</li>
                    <li>Controller&#x2019;s <code>in-chan</code> (through which it can receive commands) will be closed.</li>
                </ol>
                <p>Controller&#x2019;s <code>start</code> and <code>stop</code> functions can asynchronuously send commends to the controller. Calling <code>(execute controller-instance :command)</code> will put that command on the controller&#x2019;s <code>in-chan</code>.
                    Controller can react to these commands from the <code>handler</code> function.</p>
            </div>
        </div>
        <div class="public anchor" id="var--.3ESerializedController">
            <h3>-&gt;SerializedController</h3>
            <div class="usage"><code>(-&gt;SerializedController params)</code></div>
            <div class="doc">
                <div class="markdown"></div>
            </div>
        </div>
        <div class="public anchor" id="var-context">
            <h3>context</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Return the context passed to the application.</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-dispatcher">
            <h3>dispatcher</h3>
            <div class="usage"><code>(dispatcher app-db-atom in-chan actions)</code></div>
            <div class="doc">
                <div class="markdown">
                    <p>Helper function to dispatch commands from the <code>handler</code> function.</p>
                    <p>Most of the time, handler function will just dispatch the commands to other functions. This functions provides a shortcut for that case.</p>
                    <pre><code class="clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">defrecord</span></span> Controller []
  IController
  (<span class="hljs-name">handler</span> [_ app-db-atom in-chan _]
    (<span class="hljs-name">dispatcher</span> app-db-atom in-chan {<span class="hljs-symbol">:command-name</span> some-fn})))
</code></pre></div>
            </div>
        </div>
        <div class="public anchor" id="var-execute">
            <h3>execute</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Puts the command on the controller&#x2019;s <code>in-chan</code> which is passed as an argument to the <code>handler</code> function. Can be called from the <code>start</code> and <code>stop</code> functions.</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-handler">
            <h3>handler</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Called after the <code>start</code> function. You can listen to the commands on the <code>in-chan</code> inside the <code>go</code> block. This is the function in which you implement anything that reacts to the user commands (coming
                        from the UI).</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-is-running.3F">
            <h3>is-running?</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Returns <code>true</code> if this controller is still running. You can use this if you have some kind of async action, and you want to make sure that the controller is still running when you receive the results.</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-map-.3ESerializedController">
            <h3>map-&gt;SerializedController</h3>
            <div class="usage"><code>(map-&gt;SerializedController G__14188)</code></div>
            <div class="doc">
                <div class="markdown"></div>
            </div>
        </div>
        <div class="public anchor" id="var-not-implemented">
            <h3>not-implemented</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown"></div>
            </div>
        </div>
        <div class="public anchor" id="var-params">
            <h3>params</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Receives the <code>route-params</code> and returns either the <code>params</code> for the controller or <code>nil</code></p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-record-type">
            <h3>record-type</h3>
            <div class="usage"><code>(record-type record &amp; args)</code></div>
            <div class="doc">
                <div class="markdown"></div>
            </div>
        </div>
        <div class="public anchor" id="var-redirect">
            <h3>redirect</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Redirects the page to the URL based on the params.</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-report">
            <h3>report</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown"></div>
            </div>
        </div>
        <div class="public anchor" id="var-send-command">
            <h3>send-command</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Sends a command to another controller</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-SerializedController">
            <h3>SerializedController</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown"></div>
            </div>
        </div>
        <div class="public anchor" id="var-ssr-handler">
            <h3>ssr-handler</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Called in after the <code>start</code> (instead of the <code>handler</code> function) function in the server side context. This function should call the <code>done</code> callback when it has completed the server side data loading.
                        Returning <code>::not-implemented</code> which is a default behavior will mark the controller as non server side.</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-start">
            <h3>start</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Called when the controller is started. Receives the controller <code>params</code> (returned by the <code>params</code> function) and the application state. It must return the application state.</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-stop">
            <h3>stop</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Called when the controller is stopped. Receives the controller <code>params</code> (returned by the <code>params</code> function) and the application state. It must return the application state.</p>
                </div>
            </div>
        </div>
        <div class="public anchor" id="var-wake">
            <h3>wake</h3>
            <div class="usage"></div>
            <div class="doc">
                <div class="markdown">
                    <p>Called when the controller is started from the saved state stored on the server. It will be called instead of the <code>start</code> function if the <code>ssr-handler</code> function is implemented. This allows you to manually revive
                        the serialized data if needed. Usually this function is not needed, but if you for instance start the inner application from the controller, you can use this function to wake the inner app.</p>
                </div>
            </div>
        </div>
    </div>
</div>