_model: guide
---
order: 5
---
title: UI System
---
body:


<p>Keechma allows you to write decoupled, reusable UI components. It&apos;s still using Reagent to implement and render them &#x2014; it just adds some structure to keep things clean.</p>
<h2>Untangling the UI</h2>
<p>The UI is the messiest part of frontend application development. In most architectures, the components are coupled to the application&apos;s state, (sometimes) to their parent components and (almost always) to their child components.</p>
<blockquote>
<p>Most of our components take the entire app state as their data. Parent components don&#x2019;t pass their children sub cursor with just the bits they care about, they pass them the whole enchilada. Then we have a slew of paths defined in vars, which we use to extract the data we want. It&#x2019;s not ideal. But it&#x2019;s what we&#x2019;ve had to do.</p>
<p>From the <a href="http://blog.circleci.com/why-we-use-om-and-why-were-excited-for-om-next/">Why We Use Om, and Why We&#x2019;re Excited for Om Next</a> by Peter Jaros</p>
</blockquote>
<p>Peter understands. Most architectures have these two serious traps:</p>
<ul>
<li><strong>Parent components pass data to their children</strong> &#x2014; Forcing parent components to be aware of the needs of their children makes the &quot;data plumbing&quot; complicated, making the system hard to maintain and difficult to change.</li>
<li><strong>Global dependence on the application state</strong> &#x2014; This dependency makes testing difficult and reuse impossible.</li>
</ul>
<table>
<tr><td>You want this...</td><td>Not this...</td></tr>
<tr>
<td><img src="http://i.imgur.com/YVxxNUl.jpg" alt="home run plumbing" width="300/"></td>
<td><img src="http://www.stephenadams.com/badplumbing/images/badplumbing_16.jpg" alt="cluster plumbing" width="300/"></td>
</tr>
</table>
<p>With just a little extra code, Keechma allows you to decouple all UI components. No more plumbing traps.</p>
<p>For example, let&apos;s say that you have a component that renders a list of users (<code>user-list</code>). It is rendered inside a <code>user-page</code> component which, in turn, is rendered inside a <code>layout</code> component. In Keechma, neither <code>user-page</code> nor <code>layout</code> cares about the data that <code>user-list</code> needs. The user component simply declares its dependencies in a Clojure record. When it&apos;s rendered, its dependencies are injected directly.</p>
<p>Instead of passing data around, the only requirement is for the parent to declare its dependency upon each child. This provides context for the child component. In our example, <code>user-page</code> explicitly declares its dependency on <code>user-list</code> which will allow it to render the correct <strong>version</strong> of the component.</p>
<p>Keechma&apos;s UI system allows components to simply declare child components, each carrying its own data dependencies (if it has them). No more worrying about what data needs to be sent where.</p>
<h3>Data dependencies</h3>
<p>Components declare dependencies on <code>subscriptions</code>. Subscriptions are functions that receive the <code>app-state</code> atom as a parameter and return a subset of the data (They are almost identical to the <a href="https://github.com/Day8/re-frame#subscribe">Re/Frame&apos;s subscriptions</a> although they are not global).</p>
<hr>
<p>Again, each component declares both its data and child-component dependencies. There is an exception: if a child component has no data dependencies, it can simply be required.</p>
<p>Example:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">defn</span></span> user-table-renderer [ctx]
  (<span class="hljs-name"><span class="hljs-builtin-name">fn</span></span> []
    (<span class="hljs-name"><span class="hljs-builtin-name">let</span></span> [user-list (<span class="hljs-name">ui/subscription</span> ctx <span class="hljs-symbol">:user-list</span>)]
      <span class="hljs-comment">;; Get the user list subscription, it will be injected from the outside</span>
      [<span class="hljs-symbol">:table</span>
        (<span class="hljs-name"><span class="hljs-builtin-name">for</span></span> [user @user-list]
          ... render user ...)])))

(<span class="hljs-name"><span class="hljs-builtin-name">defn</span></span> user-table-component
  (<span class="hljs-name">ui/constructor</span>
    {<span class="hljs-symbol">:renderer</span> user-table-renderer
     <span class="hljs-symbol">:subscription-deps</span> [<span class="hljs-symbol">:user-list</span>]}))
     <span class="hljs-comment">;; Declare that this component is dependent on the `:user-list` subscription</span>

(<span class="hljs-name"><span class="hljs-builtin-name">defn</span></span> user-page-renderer [ctx]
  [<span class="hljs-symbol">:div</span>
    (<span class="hljs-name">ui/component</span> ctx <span class="hljs-symbol">:user-table</span>)])
    <span class="hljs-comment">;; Get the correctly bound `user-table` component, it will be injected from the outside</span>

(<span class="hljs-name"><span class="hljs-builtin-name">defn</span></span> user-page-component [ctx]
  (<span class="hljs-name">ui/constructor</span>
    {<span class="hljs-symbol">:renderer</span> user-page-renderer
     <span class="hljs-symbol">:component-deps</span> [<span class="hljs-symbol">:user-table</span>]}))

(<span class="hljs-name"><span class="hljs-builtin-name">defn</span></span> layout-renderer [ctx]
  [<span class="hljs-symbol">:div</span>
    (<span class="hljs-name">ui/component</span> ctx <span class="hljs-symbol">:user-page</span>)])
    <span class="hljs-comment">;; Get the correctly bound `user-page` component, that knows how to render the user list. It will be injected from the outside</span>

(<span class="hljs-name"><span class="hljs-builtin-name">defn</span></span> layout-component
  (<span class="hljs-name">ui/constructor</span>
    {<span class="hljs-symbol">:renderer</span> layout-renderer
     <span class="hljs-symbol">:component-deps</span> [<span class="hljs-symbol">:user-page</span>]}))

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> system
  (<span class="hljs-name">ui/system</span>
    {<span class="hljs-symbol">:main</span> layout-component <span class="hljs-comment">;; system must have the `:main` component defined</span>
     <span class="hljs-symbol">:user-page</span> user-page-component
     <span class="hljs-symbol">:user-table</span> user-table-component}
    {<span class="hljs-symbol">:user-list</span> (<span class="hljs-name"><span class="hljs-builtin-name">fn</span></span> [app-state])})) <span class="hljs-comment">;; this will be injected to the `user-table` component as the `:user-list` subscription</span>
<span class="hljs-comment">;; returns the bound `:main` component which can be mounted in the page</span>

(<span class="hljs-name">reagent/render-component</span> [system] dom-element)
</code></pre>
<p>There you have it, a completely decoupled UI system. The tradeoff is that you must explicitly declare dependencies for each component.</p>
<p>This way of building your UI has other advantages too. For instance, if later you build a better <code>user-list</code> component, only the system definition needs to be changed:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">system</span></span>
  (ui/system
    {<span class="hljs-symbol">:main</span> layout-component ;; system must have the `<span class="hljs-symbol">:main`</span> component <span class="hljs-keyword">defined</span>
     <span class="hljs-symbol">:user-page</span> user-page-component
     <span class="hljs-symbol">:user-table</span> my-super-awesome-user-component}))
;; returns the bound `<span class="hljs-symbol">:main`</span> component which can be mounted <span class="hljs-keyword">in</span> the page
</code></pre>
<p>Neither <code>layout</code> nor <code>user-page</code> requires refactoring.</p>
<h3>Composing systems</h3>
<p>Keechma also allows UI system composition. If your app has many different functional areas, each could be defined as its own system:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> user-page-system
  (<span class="hljs-name">ui/system</span> {...}))

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> news-page-system
  (<span class="hljs-name">ui/system</span> {...}))

(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> main-app-system
  (<span class="hljs-name">ui/system</span>
    {<span class="hljs-symbol">:user-page</span> user-page-system
     <span class="hljs-symbol">:news-page</span> news-page-system}))
</code></pre>
<p>You can easily scale your application. No more unmanageable monoliths.</p>
<h3>Resolving dependencies manually</h3>
<p>Let&apos;s say you created a generalized grid component and want to reuse it in a few places in your project, e.g. news list, user list, etc. With Keechma it&apos;s trivial to create different versions of a component, each mapped to its own dependencies:</p>
<pre><code class="language-clojure hljs">(<span class="hljs-name"><span class="hljs-builtin-name">def</span></span> system
  (<span class="hljs-name">ui/system</span>
    {<span class="hljs-symbol">:user-grid</span> (<span class="hljs-name">ui-component/resolve-subscription-dep</span>
                  grid-component <span class="hljs-symbol">:list</span> user-list)
     <span class="hljs-symbol">:news-grid</span> (<span class="hljs-name">ui-component/resolve-subscription-dep</span>
                  grid-component <span class="hljs-symbol">:list</span> news-list))})
</code></pre>
<p>Any dependencies left unresolved manually will be handled automatically.</p>
<hr>
<p>Keechma&apos;s UI system allows you to reuse components, organize them into sub-systems and to scale your code base &#x2014; all without having to build both smart <em>and</em> dumb components. All Keechma&apos;s components are both dumb and decoupled; everything is injected from outside.</p>
<p>Here are the UI system <a href="/api/keechma/keechma_ui-component/">API docs</a>.</p>
